lm(y~w+c)
?mtcars
library(MASS)
attach(shuttle)
?shuttle
y<-shuttle$use
x<-shuttle$wind
m<-glm(y~x,family = "binomial")
m
exp(m$coefficients)
1/exp(m$coefficients)
glm(y~I(x+1),family = "binomial")
exp(m$coefficients)
z<-shuttle$magn
m2<-glm(y~x+z,family = "binomial")
m2
exp(m2$coefficients)
1/exp(m2$coefficients)
exp(m2$coefficients)
glm(y~x,family = "binomial")
glm(I(y-1)~x,family = "binomial")
glm((I(y-1))~x,family = "binomial")
glm((I(1-y))~x,family = "binomial")
new<-y-1
new<-I(y-1)
y
labels(y)
`levels<-.factor`(y,0)
`levels<-.factor`(y,0,1)
`levels<-.factor`(y,auto=0,noauto=1)
levels(y)
levels(y)[1]
levels(y)[1]=0
levels(y)[2]=1
levels(y)
glm(y~x,family = "binomial")
y<-shuttle$use
levels(y)
y<-shuttle$use
levels(y)[1]=1
levels(y)[2]=0
x<-shuttle$wind
m<-glm(y~x,family = "binomial")
m
z<-shuttle$use
levels(z)[1]=0
levels(z)[2]=1
glm(z~x,family = "binomial")
levels(x)
1-y
y-1
I(y-1)
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit1 <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
fit2 <- glm(1 - use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
coef(fit1)
coef(fit2)
fit1 <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
fit2 <- glm(1 - use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
coef(fit1)
coef(fit2)
shuttle$use.binary
?InsectSprays
attach(InsectSprays)
InsectSprays
factoor(InsectSprays$spray)
factor(InsectSprays$spray)
glm(InsectSprays$count~factor(InsectSprays$spray),family = "poisson")
glm(count ~ spray - 1, data = InsectSprays, family = poisson)
exp(coef(fit))
fit <- glm(count ~ spray - 1, data = InsectSprays, family = poisson)
coef.exp <- exp(coef(fit))
exp(coef(fit))
coef.exp[1]
coef.exp[2]
unname(coef.exp[1] / coef.exp[2])
?unname
oef.exp[1] / coef.exp[2]
coef.exp[1] / coef.exp[2]
x <- seq(1, 1000, by = 1)
x
t <- log(x)
t2 <- log(10) + t
y <- ppois(x, 2)
fit1 <- glm(y ~ x + offset(t), family = poisson, data = InsectSprays)
fit1 <- glm(y ~ x + offset(t), family = poisson)
fit1 <- glm(y ~ x + offset=t, family = "poisson")
fit1 <- glm(y ~ x + offset(t), family = "poisson")
offset(t)
fit1 <- glm(y ~I(x + offset(t)), family = "poisson")
fit2 <- glm(y ~ x + offset(t2), family = poisson, data = InsectSprays)
summary(fit1)$coef
summary(fit2)$coef
fit1 <- glm(y ~ x + offset(t), family = poisson, data = InsectSprays)
fit2 <- glm(y ~ x + offset(t2), family = poisson, data = InsectSprays)
summary(fit1)$coef
summary(fit2)$coef
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
# Copy from the slides, adapt the knnot point
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
model <-lm(y ~ xMat - 1)
yhat <- predict(model)
plot(x, y, frame = FALSE, pch = 21,bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(model)
# To calculate the slope from a line: (y2 - y1) / (x2 - x1). We're interested in
# predicted values from (x in 0..5). So we take the predicted values yhat for
# x = 5 and yhat for x = 0.
unname((yhat[11] - yhat[6]) / (5 - 0))
x <- seq(1, 1000, by = 1)
t <- log(x)
t2 <- log(10) + t
y <- ppois(x, 2)
fit1 <- glm(y ~ x + offset(t), family = poisson, data = InsectSprays)
fit2 <- glm(y ~ x + offset(t2), family = poisson, data = InsectSprays)
summary(fit1)$coef
summary(fit2)$coef
library(datasets)
data("iris")
?iris
iris
lapply(split(iris$Sepal.Length,iris$Species), mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)[1]
library(datasets)
data(iris)
#A description of the dataset can be found by running
?iris
#There will be an object called 'iris' in your workspace. In this dataset, what is the mean of 'Sepal.Length' for the species virginica? (Please only enter the numeric result and nothing else.)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
#Question 3
#Load the 'mtcars' dataset in R with the following code
library(datasets)
data(mtcars)
#There will be an object names 'mtcars' in your workspace. You can find some information about the dataset by running
?mtcars
#How can one calculate the average miles per gallon (mpg) by number of cylinders in the car (cyl)?
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars,taply(mpg,cyl,mean))
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
et.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
et.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y
et.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
data("mtcars")
data("mtcars")
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
lapply(split(mtcars$mpg,mtcars$am),mean)
lapply(split(mtcars$mpg,mtcars$am),length)
x<-lapply(split(mtcars$mpg,mtcars$am),mean)
x[1]-x[2]
a<-x[1]
b<-x[2]
-b
a-b
a
b<-as.numeric(x[2])
a<-as.numeric(x[1])
a-b
t.test(mpg ~ am, data = mtcars)
lapply(split(mpg,am),mean)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars, alt="greater")
fitModel<-glm(mpg~factor(am),data=mtcars)
summary(fitModel)
Model<-lm(mpg~.,data=mtcars)
FitModel<-step(Model,direction = "backwared",trace=0)
FitModel<-step(Model,direction = "backward",trace=0)
summary(FitModel)
fitModel<-glm(mpg~am,data=mtcars)
summary(fitModel)
fitModel<-glm(mpg~am-1,data=mtcars)
summary(fitModel)
anoa(fitModel,FitModel)
anoava(fitModel,FitModel)
anova(fitModel,FitModel)
fitModel<-glm(mpg~am,data=mtcars)
anoava(fitModel,FitModel)
anova(fitModel,FitModel)
data("mtcars")
Des<-t.test(mpg ~ am, data = mtcars)
Des$p.value
summary(Des)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1,1,9,3,14)
z<-c(1,1,9,3,14)
info()
info()
c(1,1,9,3,14)
play()
nxt()
z<-c(1,1,9,3,14)
z<-c(1.1,9,3,14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
z
my_div
bye()
bye()
exit()
library(swirl)
ls()
rm(list=ls())
ls()
swirl(
)
library(swirl)
ls()
rm(list=ls())
ls()
install_from_swirl("Exploratory Data Analysis")
swirl()
1
info()
main()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
1
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region="east")
east<-subset(pollution,region=="east")
head(east)
hist(east,col="green")
hist(pm25,col="green")
hist(east$pm25,col="green")
west<-subset(pollution,region=="west")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25,col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="east")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful,call(eruptions,waiting))
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm==TRUE)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab = "Month", ylab="Ozone (ppb)",  col.axis ="blue",col.lab ="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone,type="n")
title(main="Wind and Ozone in NYC")
my<-subset(airquality,Month=5)
may<-subset(airquality,Month==5)
points(Wind,Ozone,data=may,pch=2,col="blue")
points(wind,Ozone,data=may,pch=2,col="blue")
points(may$Wind,may$Ozone,pch=2,col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=18)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue","red"),c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,title="Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiatio")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot( airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot( airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer = TRUE)
bye()
s<-min(StepsPerInterval_D$steps)/50
e<-max(StepsPerInterval_D$steps)/50
setwd("C:\\Users\\Abeer\\Desktop\\RepData_PeerAssessment1")
activity<-read.csv("activity.csv")
StepsPerDate <- aggregate(formula=steps ~ date,data=activity,FUN=sum)
head(StepsPerDate)
barplot(StepsPerDate$steps,names.arg = StepsPerDate$date,ylim=c(0, 25000),xlab="date", ylab="Total number of steps taken each day")
StepsPerInterval <- aggregate(formula=steps ~ interval,data=activity,FUN=mean)
plot(StepsPerInterval$interval, StepsPerInterval$steps, type="l",
xlab="5-minute interval", ylab="The average number of steps across all days")
StepsPerInterval$interval[which(StepsPerInterval$steps==max(StepsPerInterval$steps))]
good<-complete.cases(activity)
nrow(activity)-nrow(activity[good,])
FillingDataset <- activity
NA_Index <- is.na(FillingDataset$steps)
Interval_mean <- tapply(FillingDataset$steps, FillingDataset$interval, mean, na.rm=TRUE, simplify=TRUE)
FillingDataset$steps[NA_Index] <- Interval_mean[as.character(FillingDataset$interval[NA_Index])]
NewStepsPerDate <- aggregate(formula=steps ~ date,data=FillingDataset,FUN=sum)
barplot(NewStepsPerDate$steps,names.arg = NewStepsPerDate$date,ylim=c(0, 25000),
xlab="date", ylab="Total number of steps taken each day")
mean(NewStepsPerDate$steps)
median(NewStepsPerDate$steps)
my_lc_time <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "English")
class(FillingDataset$date)<-"Date"
DayType <-ifelse(weekdays(FillingDataset$date) == "Saturday" | weekdays(FillingDataset$date) == "Sunday", "weekend", "weekday")
FillingDataset<-mutate(FillingDataset,DayType)
FillingDataset$DayType <- as.factor(FillingDataset$DayType)
head(FillingDataset)
my_lc_time <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "English")
class(FillingDataset$date)<-"Date"
DayType <-ifelse(weekdays(FillingDataset$date) == "Saturday" | weekdays(FillingDataset$date) == "Sunday", "weekend", "weekday")
library(dplyr)
FillingDataset<-mutate(FillingDataset,DayType)
FillingDataset$DayType <- as.factor(FillingDataset$DayType)
head(FillingDataset)
StepsPerInterval_D <- aggregate(formula=steps ~interval+DayType,data=FillingDataset,FUN=mean)
library(lattice)
s<-min(StepsPerInterval_D$steps)/50
e<-max(StepsPerInterval_D$steps)/50
s
e
StepsPerInterval_D$steps<-(StepsPerInterval_D$steps/50)
head(StepsPerInterval_D)
library(lattice)
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",layout=c(1,2),
xlab="Interval", ylab="Number of steps")
StepsPerInterval_D$steps<-(StepsPerInterval_D$steps/50)-1
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",layout=c(1,2),
xlab="Interval", ylab="Number of steps")
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",ylim=c(-1,4),layout=c(1,2),
xlab="Interval", ylab="Number of steps")
tepsPerInterval_D <- aggregate(formula=steps ~interval+DayType,data=FillingDataset,FUN=mean)
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",ylim=c(-1,4),layout=c(1,2),
xlab="Interval", ylab="Number of steps")
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",,layout=c(1,2),
xlab="Interval", ylab="Number of steps")
class(FillingDataset$date)<-"Date"
DayType <-ifelse(weekdays(FillingDataset$date) == "Saturday" | weekdays(FillingDataset$date) == "Sunday", "weekend", "weekday")
library(dplyr)
FillingDataset<-mutate(FillingDataset,DayType)
FillingDataset$DayType <- as.factor(FillingDataset$DayType)
head(FillingDataset)
StepsPerInterval_D <- aggregate(formula=steps ~interval+DayType,data=FillingDataset,FUN=mean)
head(StepsPerInterval_D)
library(lattice)
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",,layout=c(1,2),
xlab="Interval", ylab="Number of steps")
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",scales = 4,layout=c(1,2),
xlab="Interval", ylab="Number of steps")
xyplot(steps ~ interval | DayType, data=StepsPerInterval_D,type="l",layout=c(1,2),
xlab="Interval", ylab="Number of steps")
setwd("C:/Users/Abeer/Desktop/RepData_PeerAssessment1")
?echo
?{r, echo}
